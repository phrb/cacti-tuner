addprocs()

import StochasticSearch

@everywhere begin
    using StochasticSearch
    function generate_cacti_config(c::Configuration, path::String)
        unique_id = Base.Random.uuid4()
        filename  = "$path/$(unique_id)_tuned.cfg"
        file      = open("$filename", "w+")

        text = "# Autogenerated CACTI config file\n"
        text = string(text, "-size (bytes) $(c["size"].value)\n")
        text = string(text, "-block size (bytes) $(2 ^ c["block size"].value)\n")
        text = string(text, "-associativity $(2 ^ c["associativity"].value)\n")
        text = string(text, "-UCA bank count $(2 ^ c["uca bank"].value)\n")

        text = string(text, "-read-write port $(c["rw port"].value)\n")
        text = string(text, "-exclusive read port $(c["er port"].value)\n")
        text = string(text, "-exclusive write port $(c["ew port"].value)\n")
        text = string(text, "-single ended read ports $(c["ser ports"].value)\n")

        text = string(text, "-technology (u) $(c["technology"].value)\n")
        text = string(text, "-page size (bits) $(2 ^ c["page size"].value)\n")
        text = string(text, "-burst length $(2 ^ c["burst length"].value)\n")
        text = string(text, "-internal prefetch width $(2 ^ c["internal prefetch"].value)\n")
        text = string(text, "-Data array cell type - \"$(c["da cell type"].current.value)\"\n")
        text = string(text, "-Data array peripheral type - \"$(c["da peri type"].current.value)\"\n")
        text = string(text, "-Tag array cell type - \"$(c["ta cell type"].current.value)\"\n")
        text = string(text, "-Tag array peripheral type - \"$(c["ta peri type"].current.value)\"\n")
        text = string(text, "-input/output bus width $(2 ^ c["io bus"].value)\n")
        text = string(text, "-operating temperature (K) $(10 * c["temp"].value)\n")
        text = string(text, "-cache type \"$(c["cache type"].current.value)\"\n")

        if c["tag size"].value == 0
            text = string(text, "-tag size (b) \"default\"\n")
        else
            text = string(text, "-tag size (b) $(c["tag size"].value)\n")
        end

        text = string(text, "-access mode \"$(c["access mode"].current.value)\"\n")

        text = string(text, "-design objective $(c["delay obj"].value):")
        text = string(text, "$(c["dynamic power obj"].value):")
        text = string(text, "$(c["leakage power obj"].value):")
        text = string(text, "$(c["cycle time obj"].value):")
        text = string(text, "$(c["area obj"].value)\n")

        text = string(text, "-deviate $(c["delay dev"].value):")
        text = string(text, "$(c["dynamic power dev"].value):")
        text = string(text, "$(c["leakage power dev"].value):")
        text = string(text, "$(c["cycle time dev"].value):")
        text = string(text, "$(c["area dev"].value)\n")

        text = string(text, "-NUCAdesign objective $(c["nuca delay obj"].value):")
        text = string(text, "$(c["nuca dynamic power obj"].value):")
        text = string(text, "$(c["nuca leakage power obj"].value):")
        text = string(text, "$(c["nuca cycle time obj"].value):")
        text = string(text, "$(c["nuca area obj"].value)\n")

        text = string(text, "-NUCAdeviate $(c["nuca delay dev"].value):")
        text = string(text, "$(c["nuca dynamic power dev"].value):")
        text = string(text, "$(c["nuca leakage power dev"].value):")
        text = string(text, "$(c["nuca cycle time dev"].value):")
        text = string(text, "$(c["nuca area dev"].value)\n")

        text = string(text, "-Optimize \"$(c["optimize"].current.value)\"\n")
        text = string(text, "-Cache model \"$(c["cache model"].current.value)\"\n")
        text = string(text, "-NUCA bank count $(c["nuca bank count"].value)\n")
        text = string(text, "-Wire signalling - \"$(c["wire signalling"].current.value)\"\n")
        text = string(text, "-Wire inside mat - \"$(c["wire inside"].current.value)\"\n")
        text = string(text, "-Wire outside mat - \"$(c["wire outside"].current.value)\"\n")
        text = string(text, "-Interconnect projection - \"$(c["interconnect"].current.value)\"\n")
        text = string(text, "-Core count $(2 ^ c["core count"].value)\n")
        text = string(text, "-Cache level - \"$(c["cache level"].current.value)\"\n")

        write(file, text)
        close(file)

        return filename
    end

    function run_cacti(x::Configuration, parameters::Dict{Symbol, Any})
        try
            filename = generate_cacti_config(x, "..")

            cmd    = `./run_cacti.sh $filename`
            output = readstring(cmd)
            return parse(Float64, output)
        catch
            rm(filename)
            return Inf
        end
    end
end

configuration = Configuration([IntegerParameter(64, 1073741824, 4194304, "size"),
                               IntegerParameter(0, 4, 0, "associativity"),
                               IntegerParameter(5, 14, 9, "block size"),
                               IntegerParameter(0, 14, 2, "uca bank"),
                               IntegerParameter(1, 10, 1, "rw port"),
                               IntegerParameter(0, 10, 0, "er port"),
                               IntegerParameter(0, 10, 0, "ew port"),
                               IntegerParameter(0, 10, 0, "ser ports"),
                               FloatParameter(0.032, 0.090, 0.032, "technology"),
                               IntegerParameter(0, 5, 3, "burst length"),
                               IntegerParameter(0, 18, 13, "page size"),
                               IntegerParameter(0, 5, 3, "internal prefetch"),
                               EnumParameter([StringParameter("lp-dram", "name"),
                                              StringParameter("comm-dram", "name"),
                                              StringParameter("itrs-hp", "name"),
                                              StringParameter("itrs-lstp", "name"),
                                              StringParameter("itrs-lop", "name")],
                                              2, "da cell type"),
                               EnumParameter([StringParameter("itrs-hp", "name"),
                                              StringParameter("itrs-lstp", "name"),
                                              StringParameter("itrs-lop", "name")],
                                              1, "da peri type"),
                               EnumParameter([StringParameter("lp-dram", "name"),
                                              StringParameter("comm-dram", "name"),
                                              StringParameter("itrs-hp", "name"),
                                              StringParameter("itrs-lstp", "name"),
                                              StringParameter("itrs-lop", "name")],
                                              3, "ta cell type"),
                               EnumParameter([StringParameter("itrs-hp", "name"),
                                              StringParameter("itrs-lstp", "name"),
                                              StringParameter("itrs-lop", "name")],
                                              1, "ta peri type"),
                               IntegerParameter(0, 12, 8, "io bus"),
                               IntegerParameter(30, 40, 35, "temp"),
                               EnumParameter([StringParameter("ram", "name"),
                                              StringParameter("cache", "name"),
                                              StringParameter("main-memory", "name")],
                                              1, "cache type"),
                               IntegerParameter(0, 45, 0, "tag size"),
                               EnumParameter([StringParameter("normal", "name"),
                                              StringParameter("sequential", "name"),
                                              StringParameter("fast", "name")],
                                              1, "access mode"),
                               IntegerParameter(0, 100, 0, "delay obj"),
                               IntegerParameter(0, 100, 0, "dynamic power obj"),
                               IntegerParameter(0, 100, 0, "leakage power obj"),
                               IntegerParameter(0, 100, 0, "cycle time obj"),
                               IntegerParameter(0, 100, 100, "area obj"),
                               IntegerParameter(0, 1000000, 60, "delay dev"),
                               IntegerParameter(0, 1000000, 100000, "dynamic power dev"),
                               IntegerParameter(0, 1000000, 100000, "leakage power dev"),
                               IntegerParameter(0, 1000000, 100000, "cycle time dev"),
                               IntegerParameter(0, 1000000, 1000000, "area dev"),
                               IntegerParameter(0, 100, 100, "nuca delay obj"),
                               IntegerParameter(0, 100, 100, "nuca dynamic power obj"),
                               IntegerParameter(0, 100, 0, "nuca leakage power obj"),
                               IntegerParameter(0, 100, 0, "nuca cycle time obj"),
                               IntegerParameter(0, 100, 100, "nuca area obj"),
                               IntegerParameter(0, 10000, 10, "nuca delay dev"),
                               IntegerParameter(0, 10000, 10000, "nuca dynamic power dev"),
                               IntegerParameter(0, 10000, 10000, "nuca leakage power dev"),
                               IntegerParameter(0, 10000, 10000, "nuca cycle time dev"),
                               IntegerParameter(0, 10000, 10000, "nuca area dev"),
                               EnumParameter([StringParameter("ED", "name"),
                                              StringParameter("ED^2", "name"),
                                              StringParameter("NONE", "name")],
                                              3, "optimize"),
                               EnumParameter([StringParameter("UCA", "name"),
                                              StringParameter("NUCA", "name")],
                                              1, "cache model"),
                               IntegerParameter(0, 200, 0, "nuca bank count"),
                               EnumParameter([StringParameter("fullswing", "name"),
                                              StringParameter("lowswing", "name"),
                                              StringParameter("default", "name"),
                                              StringParameter("Global_10", "name"),
                                              StringParameter("Global_20", "name"),
                                              StringParameter("Global_30", "name")],
                                              4, "wire signalling"),
                               EnumParameter([StringParameter("global", "name"),
                                              StringParameter("semi-global", "name")],
                                              1, "wire inside"),
                               EnumParameter([StringParameter("global", "name"),
                                              StringParameter("semi-global", "name")],
                                              1, "wire outside"),
                               EnumParameter([StringParameter("conservative", "name"),
                                              StringParameter("aggressive", "name")],
                                              1, "interconnect"),
                               IntegerParameter(2, 4, 3, "core count"),
                               EnumParameter([StringParameter("L2", "name"),
                                              StringParameter("L3", "name")],
                                              2, "cache level")],
                               "cacti_config")

tuning_run = Run(cost                = run_cacti,
                 starting_point      = configuration,
                 stopping_criterion  = elapsed_time_criterion,
                 report_after        = 30,
                 reporting_criterion = elapsed_time_reporting_criterion,
                 duration            = 1800,
                 methods             = [[:simulated_annealing 2];
                                        [:iterative_first_improvement 2];
                                        [:iterated_local_search 2];
                                        [:randomized_first_improvement 2];
                                        [:iterative_probabilistic_improvement 2];])

results_path = "./results/target_area_1800/2"
results_log  = "$results_path/best_over_time.log"

try
    mkpath(results_path)
catch
    println("The directory $results_path already existed.")
end

results_file = open(results_log, "w+")

@spawn optimize(tuning_run)

result = take!(tuning_run.channel)

println("Starting tuning run...")

println("$(result.current_time) $(result.cost_minimum)")
write(results_file, "$(result.current_time) $(result.cost_minimum)\n")

while !result.is_final
    result = take!(tuning_run.channel)

    println("$(result.current_time) $(result.cost_minimum)")
    write(results_file, "$(result.current_time) $(result.cost_minimum)\n")
end

println("Done.")
